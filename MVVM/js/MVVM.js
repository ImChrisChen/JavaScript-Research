class Vue {    constructor(vm) {        this.$el = document.querySelector(vm.el);        this.$data = vm.data;        this.Compile(this.$el);    }        Compile(el) {        let nodes = el.childNodes;        [...nodes].forEach(node => {            if (this.isElement(node)) {                this.CompileElement(node);                this.Compile(node);            } else {                this.CompileText(node);            }        });    }        isElement(node) {        return node.nodeType === 1;    }        isDirective(attrName) {        return attrName.startsWith('v-');    }        CompileElement(node) {        let attrs = node.attributes;        [...attrs].forEach(attr => {            let { name, value: expr } = attr;            if (this.isDirective(name)) {                let [, directive] = name.split('-');                CompileUtil[directive](node, expr, this);            }        })    }        CompileText(text) {        let content = text.textContent;        if (/\{\{(.+?)\}\}/.test(content)) {        }    }    }CompileUtil = {    getVal(vm, expr) {        console.log(vm, expr);        return expr.split('.').reduce((data, current, next) => {            // console.log(data, current);            return data[current];        }, vm.$data);    },    model(node, expr, vm) {        let value = this.getVal(vm, expr);        console.log(value);        this.updater['modelUpdater'](node, value);    },    text(node, expr, vm) {        },    html(node, expr, vm) {        },        updater: {        modelUpdater(node, value) {            node.value = value;        },        textUpdater(node, value) {            node.textContent = value;        },        htmlUpdater(node, value) {            node.innerHTML = value;        }    }}